name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: "Publish to Test PyPI instead of PyPI"
        required: false
        default: "false"

jobs:
  build-wheels:
    name: Build ${{ matrix.target }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64
            artifact: publish-wheels-linux-x86_64
            args: --release --out dist --find-interpreter
            manylinux: auto
            before-script-linux: |
              yum install -y openblas-devel
          - os: ubuntu-latest
            target: aarch64
            artifact: publish-wheels-linux-aarch64
            args: --release --out dist --find-interpreter
            manylinux: auto
            before-script-linux: |
              yum install -y openblas-devel
          - os: windows-latest
            target: x86_64
            artifact: publish-wheels-windows
            args: --release --out dist --find-interpreter
            manylinux: off
            before-script-linux: ""
          - os: macos-latest
            target: x86_64
            artifact: publish-wheels-macos
            args: --release --out dist --find-interpreter --universal2
            manylinux: off
            before-script-linux: ""
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          allow-prereleases: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: ${{ matrix.args }}
          sccache: "true"
          manylinux: ${{ matrix.manylinux }}
          before-script-linux: ${{ matrix.before-script-linux }}

      - name: Upload wheels
        uses: actions/upload-artifact@v5
        with:
          name: ${{ matrix.artifact }}
          path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v5
        with:
          name: publish-sdist
          path: dist/*.tar.gz

  publish:
    name: Publish distributions
    runs-on: ubuntu-latest
    needs:
      - build-wheels
      - build-sdist
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download built distributions
        uses: actions/download-artifact@v6
        with:
          path: publish-dist

      - name: Prepare distribution folder
        run: |
          mkdir -p dist
          find publish-dist -name "*.whl" -exec cp {} dist/ \;
          find publish-dist -name "*.tar.gz" -exec cp {} dist/ \;

      - name: List distributions
        run: ls -lh dist/

      - name: Publish to Test PyPI
        if: github.event.inputs.test_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          packages-dir: dist

      - name: Publish to PyPI
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: dist

  verify-publish:
    name: Verify publication
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          allow-prereleases: true

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Wait for distribution availability
        run: sleep 60

      - name: Verify Test PyPI package
        if: github.event.inputs.test_pypi == 'true'
        run: |
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple dervflow
          python -c "import dervflow; print(f'Test PyPI install OK: {dervflow.__version__}')"

      - name: Verify PyPI package
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          pip install dervflow
          python -c "import dervflow; print(f'PyPI install OK: {dervflow.__version__}')"
